var documenterSearchIndex = {"docs":
[{"location":"api/","page":"APIs","title":"APIs","text":"Modules = [Geant4]","category":"page"},{"location":"api/#Geant4.G4JLApplication-Tuple{}","page":"APIs","title":"Geant4.G4JLApplication","text":"G4JLApplication(<keyword arguments>)\n\nInitialize a G4JLApplication with its associated tyopes and methods.\n\nArguments\n\ndetector::G4JLDetector: detector description object\nsimdata=G4JLNoData(): simulation data object\ngenerator=G4JLParticleGun(): primary particle generator\nfield=nothing: magnetic field\nevtdisplay=nothing: event display (visualization)\nnthreads=0: number of Geant4 worker threads ( >0 implies MT)\nverbose=0 : default verbority level (physics, ...)\nrunmanager_type=G4RunManager: run manager type\nbuilder_type=G4JLDetectorConstruction: detector builder type (the default should be fine most cases)\nphysics_type=FTFP_BERT: physics list type\nstepaction_type=G4JLSteppingAction: stepping action type (the default should be fine most cases)\ntrackaction_type=G4JLTrackingAction: rtacking action type (the default should be fine most cases)\nrunaction_type=G4JLRunAction: run action type (the default should be fine most cases)\neventaction_type=G4JLEventAction: event action type (the default should be fine most cases)\nstepaction_method=nothing: stepping action method with signature (::G4Step, ::G4JLApplication)::Nothing\npretrackaction_method=nothing: pre-tracking action method with signature (::G4Track, ::G4JLApplication)::Nothing\nposttrackaction_method=nothing: post-tracking action method with signature (::G4Track, ::G4JLApplication)::Nothing\nbeginrunaction_method=nothing: begin run action method with signature (::G4Run, ::G4JLApplication)::Nothing\nendrunaction_method=nothing: end run action method with signature (::G4Run, ::G4JLApplication)::Nothing\nbegineventaction_method=nothing: begin event action method with signature (::G4Event, ::G4JLApplication)::Nothing\nendeventaction_method=nothing: end event action method with signature (::G4Event, ::G4JLApplication)::Nothing\nstatechange_method=nothing: state change notifycation method with  signature (from::G4ApplicationState, to::G4ApplicationState, ::G4JLApplication)::Bool\nsdetectors::Vector{}=[]: vector of pairs lv::String => sd::G4JLSensitiveDetector to associate logical volumes to sensitive detector\nscorers::Vector{}=[]: vector of G4JLScoringMeshs\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.G4JLDetectorGDML-Tuple{String}","page":"APIs","title":"Geant4.G4JLDetectorGDML","text":"G4JLDetectorGDML(gdmlfile::String; check_overlap::Bool, validate_schema::Bool, init_method::Union{Function,Nothing})\n\nInitialize a G4JLDetector from a GDML file. The GDML file is parsed at this moment.\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.G4JLMagneticField-Union{Tuple{T}, Tuple{String, T}} where T<:G4JLFieldData","page":"APIs","title":"Geant4.G4JLMagneticField","text":"G4JLMagneticField(name::String, data::DATA; <keyword arguments>) where DATA<:G4JLGeneratorData\n\nCreate a G4JLMagneticField with its name and associated DATA structure\n\nArguments\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.G4JLPrimaryGenerator-Union{Tuple{T}, Tuple{String, T}} where T<:G4JLGeneratorData","page":"APIs","title":"Geant4.G4JLPrimaryGenerator","text":"G4JLPrimaryGenerator(name::String, data::DATA; <keyword arguments>) where DATA<:G4JLGeneratorData\n\nCreatre a G4JLPrimaryGenerator with its name and associated DATA structure\n\nArguments\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.G4JLScoringMesh-Union{Tuple{M}, Tuple{String, M}} where M<:Geant4.AbstractMesh","page":"APIs","title":"Geant4.G4JLScoringMesh","text":"G4JLScoringMesh(name, mesh; <keyword arguments>)\n\nCreate a scoring mesh to be added to the Geant4 application.\n\nArguments\n\nname::String: scoring mech name\nmesh::AbstractMesh: mesh instance. Either a BoxMesh or CylinderMesh\nbins::Tuple: tuple with number on bins in x, y, z (default 30, 30, 30)\ntranslation::Tuple: position (x,y,z) with respect the mesh respect to the world volume. Default is  (0,0,0).\nrotation::Tuple: rotation of the mesh with respect the world volume. Default (0,0,0)\nquantities::Vector: vector of quanties to be scored (e.g. energyDeposit, doseDeposit, nOfStep)\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.G4JLSensitiveDetector-Union{Tuple{T}, Tuple{String, T}} where T<:G4JLSDData","page":"APIs","title":"Geant4.G4JLSensitiveDetector","text":"G4JLSensitiveDetector(name::String, data::DATA; <keyword arguments>) where DATA<:G4JLSDData\n\nInitialize a G4JLSensitiveDetector with its name and associated DATA structure.\n\nArguments\n\nname::String: Sensitive detector name\ndata::DATA: Data structure associted to the sensitive detector\nprocesshits_method=nothing: processHit function with signature: (data::DATA, step::G4Step, ::G4TouchableHistory)::Bool\ninitialize_method=nothing: intialize function with signature: (data::DATA, ::G4HCofThisEvent)::Nothing\nendofevent_method=nothing: endOfEvent function with signature: (data::DATA, ::G4HCofThisEvent)::Nothing \n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.GetVolume-Tuple{String}","page":"APIs","title":"Geant4.GetVolume","text":"GetVolume(name::String)\n\nGet the  the G4LogicalVolume with this name.\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.GetWorldVolume-Tuple{}","page":"APIs","title":"Geant4.GetWorldVolume","text":"GetWorldVolume()\n\nGet the world volume of the currently instantiated detector geometry.\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.beamOn-Tuple{G4JLApplication, Int64}","page":"APIs","title":"Geant4.beamOn","text":"beamOn(app::G4JLApplication, nevents::Int)\n\nStart a new run with nevents events.\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.configure-Tuple{G4JLApplication}","page":"APIs","title":"Geant4.configure","text":"configure(app::G4JLApplication)\n\nConfigure the Geant4 application. It sets the declared user actions, event generator, and physcis list. \n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.getSDdata-Tuple{Any, Any}","page":"APIs","title":"Geant4.getSDdata","text":"getSDdata(app::G4JLApplication, name::String)\n\nGet the data associated to the Sentitive Detector with a given name taking into account the current worker thread ID \n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.getSIMdata-Tuple{Any}","page":"APIs","title":"Geant4.getSIMdata","text":"getSIMdata(app::G4JLApplication)\n\nGet the Simulation Data taking into account the current worker thread ID \n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.initialize-Tuple{G4JLApplication}","page":"APIs","title":"Geant4.initialize","text":"initialize(app::G4JLApplication)\n\nInitialize the Geant4 application. It initializes the RunManager, which constructs the detector geometry, and sets  the declared sensitive detectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.move!-Tuple{Any}","page":"APIs","title":"Geant4.move!","text":"move!(o)\n\nMove ownerhip of C++ object to receiver. The object cannot not be used anymore after this call.\n\n\n\n\n\n","category":"method"},{"location":"api/#Geant4.reinitialize-Tuple{G4JLApplication, G4JLDetector}","page":"APIs","title":"Geant4.reinitialize","text":"reinitialize(app::G4JLApplication, det::G4JLDetector)\n\nRe-initialize the Geant4 application with a new detector defintion.\n\n\n\n\n\n","category":"method"},{"location":"#Geant4.jl","page":"Introduction","title":"Geant4.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia bindings for the Geant4 particle transportation toolkit. It is using CxxWrap.jl package to wrap C++ types and functions to Julia. Since the Geant4 toolkit is rather large and complex, writing the wrapper code by hand is not really an option. For this we use the package WrapIt that automates the generation of the wrapper code making use of the clang library.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation of the concepts and how to write applications with the Geant4 toolkit can be found with the Application Developer Guide or the Classes and Members reference guide for a detailed description of each C++ class. In this document we will only highlight the differences between the Julia and the C++ API. We will document the additional types that have been added on top of the C++ classes to make the user interface more Julia friendly. To distinguish these new types from the types coming directly from C++ via the CxxWrap wrappers, these types are prefixed with G4JL.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The Geant4.jl package does no require any special installation. Stable releases are registered into the Julia general registry, and therefore can be installed with the standard Pkg Julia package manager.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To use and play with the examples on this package, the user can clone this repository and setup a complete Julia environment with:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"git clone https://github.com/JuliaHEP/Geant4.jl.git\njulia --project=Geant4.jl/examples -e 'import Pkg; Pkg.instantiate()'","category":"page"},{"location":"#Getting-started","page":"Introduction","title":"Getting started","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Import the Geant4 module. All the wrapped Geant4 classes are exported since they are prefixed by G4 minimizing the chances of a name clash with other Julia symbols. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"\njulia> using Geant4\njulia> runManager = G4RunManager()\n**************************************************************\n Geant4 version Name: geant4-11-01-patch-01 [MT]   (10-February-2023)\n                       Copyright : Geant4 Collaboration\n                      References : NIM A 506 (2003), 250-303\n                                 : IEEE-TNS 53 (2006), 270-278\n                                 : NIM A 835 (2016), 186-225\n                             WWW : http://geant4.org/\n**************************************************************\n\nGeant4.G4RunManagerAllocated(Ptr{Nothing} @0x00007f9fcb6f9c50)\n\njulia> methodswith(G4RunManager, supertypes=true)\n[1] convert(t::Type{G4RunManager}, x::T) where T<:G4RunManager in Geant4 at /Users/mato/.julia/packages/CxxWrap/IdOJa/src/CxxWrap.jl:676\n[2] AbortEvent(arg1::Union{CxxWrap.CxxWrapCore.CxxRef{<:G4RunManager}, Union{CxxWrap.CxxWrapCore.SmartPointer{T2}, T2} where T2<:G4RunManager}) in Geant4 at /Users/mato/.julia/packages/CxxWrap/IdOJa/src/CxxWrap.jl:618\n...\n[94] rndmSaveThisRun(arg1::Union{CxxWrap.CxxWrapCore.CxxRef{<:G4RunManager}, Union{CxxWrap.CxxWrapCore.SmartPointer{T2}, T2} where T2<:G4RunManager}) in Geant4 at /Users/mato/.julia/packages/CxxWrap/IdOJa/src/CxxWrap.jl:618\n\njulia> v = GetVersionString(runManager)\nConstCxxRef{G4String}(Ptr{G4String} @0x00007ffed34df2d8)\n\njulia> String(v)\n\" Geant4 version Name: geant4-11-01-patch-01 [MT]   (10-February-2023)\"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that class methods are called with the object instance as first argument. In C++ the GetVersionString method would be called as runManager->GetVersionString() while in Julia it is called as GetVersionString(runManager). Thanks to the Julia multi-dispatch we do not need to prefix the methods with the module name Geant4.GetVersionString(runManager), even for very common function names such as mag.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> v = G4ThreeVector(1,2,3)\nGeant4.CLHEP!Hep3VectorAllocated(Ptr{Nothing} @0x00007f9fcaf2a710)\n\njulia> mag(v)\n3.7416573867739413","category":"page"},{"location":"#Geant4-Julia-interface","page":"Introduction","title":"Geant4 Julia interface","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The main goal for defining a Geant4 application in the Julia interface is to create an instance of the G4JLApplication type, where all the needed elements for running a Geant4 application are declared, such as the detector geometry, the physics list, the primary particle generator, the type of run manager, the user actions, etc. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Figure)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"These are the needed elements:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"detector. An instance of a detector structure inheriting from the abstract type G4JLDetector, in which all the detector parameters are defined. The user should also provide a method specialization of Geant4.getConstructor(::G4JLDetector)::Function to return the Julia function that toolkit needs to call in order to construct the geometry and return the pointer of the 'world' physical volume. There is no default.\nfield. An instance of the magnetic field class. The G4JLUniformMagField(...) function provides a uniform magnetic field. See later how to define a custom one.\nsimdata. An instance of the simulation data structure that the program will need to collect during the simulation execution. This mutable structure needs to inherit from the abstract type G4JLSimulationData and is completely user defined with counters, data structures to collect the hits or doses, histograms, etc. The default is an instance of type G4JLNoData.\nnthreads. Number of worker threads to be used. The default is 0, which means serial mode. Any number > 0 will use the MT functionality of Geant4, and therefore the user would need to pay attention to the user actions that are run concurrently to avoid data races (see Julia doc on multi-threading)\nverbose. Verbosity level (for physics list). The default is 0.\nphysics_type. The physics list predefined type. Default is FTFP_BERT.\ngenerator_type. The primary generator generator type. The default is G4JLParticleGun, which encapsulates a G4ParticleGun. The underlying G4ParticleGun can be obtained by calling GetGun().\nuser actions. Julia methods defining the different possible user actions (e.g. stepping action, tracking action, run action, event action). The default is no action.\nsdetectors. List of sensitive detectors. This is given as a Vector of pairs lv::String => sd::G4JLSensitiveDetector to associate logical volumes by name to sensitive detector instances (see next section).\nscorers. List of scoring meshes defined with the function G4JLScoringMesh.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Once the G4JLApplication is instantiated (and implicitly an instance of the G4RunManager created), the user can control the application with the following commands:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"configure(::G4JLApplication). It associates the physics list, generator and user actions to the selected G4RunManager instance. \ninitialize(::G4JLApplication). It basically calls the Initialize() method of the run manager and associate the declared sensitive detectors.\nreinitialize(::G4JLApplication, ::G4JLDetector). It re-defines the declared detector geometry with a new instance of G4JLDetector. \nbeamOn(::G4JLApplication, ::Int). Starts a run with a given number of events.","category":"page"},{"location":"#Constructing-the-detector","page":"Introduction","title":"Constructing the detector","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Parameters of the detector are collected in a user defined mutable data structure inheriting from G4JLDetector. The user also needs to provide a Julia method for constructing the geometry. This method needs to have the signature","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"<User_Det_Constructor_Function>(::G4JLDetector)::CxxPtr{G4VPhysicalVolume}","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The only argument of the function gives access to the user defined structure with all the detector parameters.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nThe type CxxPtr{G4VPhysicalVolume} denotes a C++ pointer to the G4VPhysicalVolume type.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The user can use the native G4 classes for constructing the geometry such as the different type of solids (e.g. G4Box, G4Tubs, etc.), G4LogicalVolume, G4PVPlacement, G4PVReplica, etc. Alternatively can the type G4JLDetectorGDML to construct a detector from a GDML file.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nNote that by default constructed C++ objects from Julia would get automatically deleted by the Julia garbage collector (GC) since a finalizer gets installed to the wrapper classes. This is particularly a problem when constructing the geometry.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Currently for the following classes have the finalizer disabled in the wrapper: G4PVPlacement, G4LogicalVolume, G4PVReplica, G4Material, G4Isotope, G4Element. This means that instances of them will not be deleted by Julia to avoid double deletion (often a crash) when the geometry gets deleted at the finalization of the application from the C++ side. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A pointer to any of the G4Solid needs to be passed to the G4LogicalVolume using move!(objref) function to transfer the ownership of the referenced object to the C++ side. See the following example:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"trackerS = G4Tubs(\"tracker\", 0, trackerSize, trackerSize, 0, 360deg)\ntrackerLV = G4LogicalVolume(move!(trackerS), m_air, \"Tracker\")\nG4PVPlacement(nothing,              # no rotation\n    G4ThreeVector(0,0,0),           # at (0,0,0)\n    trackerLV,                      # its logical volume\n    \"Tracker\",                      # its name\n    worldLV,                        # its mother  volume\n    false,                          # no boolean operations\n    0,                              # copy number\n    checkOverlaps)                  # checking overlaps","category":"page"},{"location":"#Physics-List","page":"Introduction","title":"Physics List","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The user can provide one of the pre-defined physics lists, such as QGS_BIC, QBBC or FTFP_BERT. Alternatively, the user can define a Julia structas a subtype ofG4VUserPhysicsList` and modify some of the physcis in the constructor. For example:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"struct ScintPhysicsList <: G4VUserPhysicsList\n    function ScintPhysicsList(verbose)\n        pl = FTFP_BERT(verbose)\n        # replace G4EmStandardPhysics\n        ReplacePhysics(pl, move!(G4EmStandardPhysics_option4(verbose)))\n        # register G4OpticalPhysics\n        RegisterPhysics(pl, move!(G4OpticalPhysics(verbose)))\n        # activate  scintillation\n        optpar = G4OpticalParameters!Instance()\n        SetProcessActivation(optpar, \"Scintillation\", true)\n        # activate cherenkov radiation\n        SetProcessActivation(optpar, \"Cerenkov\", true)\n        return pl\n    end \nend","category":"page"},{"location":"#Magnetic-field","page":"Introduction","title":"Magnetic field","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The user can define either an uniform magnetic field or a custom one. To define an custom one:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"define first a user structure for the parameters that inherits from the abstract type G4JLFieldData\nthen, define a function with the signature (result::G4ThreeVector, position::G4ThreeVector, params::G4JLFieldData)::Nothing\nand finally, with all this, instantiate the magnetic field calling the function \n  G4JLMagneticField(<name>, <data>; getfield_method=<function>)","category":"page"},{"location":"#Primary-Particle-Generator","page":"Introduction","title":"Primary Particle Generator","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The user can define either a custom primary particle generator or use one of the two defined ones:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"G4JLGunGenerator. Uses the G4ParticleGun class of Geant4 that generates a single particle type with a fix kinetic energy, position and direction.\nG4JLGunGenerator(particle = \"proton\", \n                 energy = 3GeV, \n                 direction = G4ThreeVector(0,0,1), \n                 position = G4ThreeVector(0,0,-2940.0))\nG4JLGeneralParticleSource. Uses the G4GeneralParticleSource class of Geant4 to generate one of more sources of primary particles with predefined distributions for energy, position and direction. An example can be:\nsrc1 = (particle=\"e+\", intensity=0.5,\n        ene=(type=\"Exp\", min=2MeV, max=10MeV, ezero=2.),\n        pos=(type=\"Plane\", shape=\"Circle\", centre=G4ThreeVector(1cm,2cm,0cm), radius=3cm),\n        ang=(type=\"cos\", mintheta=0deg, maxtheta=180deg))\nsrc2 = (particle=\"gamma\", intensity=0.5,\n        ene=(type=\"Brem\", min=2MeV, max=10MeV, temp=2e12),\n        pos=(type=\"Plane\", shape=\"Ellipse\", centre=G4ThreeVector(3cm,1cm,0cm), halfx=1cm, halfy=2cm),\n        ang=(type=\"iso\", mintheta=0deg, maxtheta=180deg))\ngps = G4JLGeneralParticleSource(sources = [ src1, src 2 ])\nthe standard particle gun parameters works as well:\nG4JLGeneralParticleSource(particle = \"proton\", \n                          energy = 3GeV, \n                          direction = G4ThreeVector(0,0,1), \n                          position = G4ThreeVector(0,0,0))\nCustom Generator. It is fairly simple to write a custom generator. It is needed to define a structure for the parameters to configure the genearator and a two functions to initialize and generate the primary particles called for each event. Here is an example:\n# define the data structure with the generator parameters\nmutable struct PlaneSourceData <: G4JLGeneratorData\n  particleName::String\n particlePtr::CxxPtr{G4ParticleDefinition}\n energy::Float64 \n  halfx::Float64\n  halfy::Float64\n  position::G4ThreeVector\n  direction::G4ThreeVector\nend\n\n# define the constructor with the default parameters\nfunction PlaneSource(;particle=\"gamma\", energy=0.07MeV, halfx=7cm, halfy=7cm, \n                                      position=G4ThreeVector(0,0,-14.9cm), direction=G4ThreeVector(0,0,1))\n  data = PlaneSourceData(particle, CxxPtr{G4ParticleDefinition}(C_NULL), energy, halfx, halfy, position, direction)\n  function init(data:: PlaneSourceData, app::G4JLApplication)\n      data.particlePtr = FindParticle(data.particleName)\n  end\n  function generate( evt::G4Event, data:: PlaneSourceData)::Nothing\n      mass = data.particlePtr |> GetPDGMass\n      momentum = √((mass + data.energy)^2 - mass^2)\n      pvec = momentum * data.direction\n      pos = data.position + G4ThreeVector( data.halfx * (rand() - 0.5),  data.halfy * (rand() - 0.5), 0)\n      primary = G4PrimaryParticle(data.particlePtr, pvec |> x, pvec |> y, pvec |> z )\n      vertex = G4PrimaryVertex(pos, 0ns)\n      SetPrimary(vertex, move!(primary))    # note that we give up ownership of the objects just created\n      AddPrimaryVertex(evt, move!(vertex))  # note that we give up ownership of the objects just created\n  end\n  G4JLPrimaryGenerator(\"PlaneSource\", data; init_method=init, generate_method=generate)\nend","category":"page"},{"location":"#User-Actions","page":"Introduction","title":"User Actions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"User actions are native Julia functions that are callbacks of the Geant4 toolkit. They are declared in the constructor of G4JLApplication, so they do not need to be associated to a specific function name. All user actions receive a reference to the G4JLApplication from which the user can obtain details of the actual application, such as the current detector, the physics, the generator, or the running simulation data. There are the available attributes of the application instance:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"    runmanager::G4RunManager    # The C++ G4RunManager instance\n    detector::DET               # User defined detector structure with all parameters\n    simdata::Vector{DAT}        # User defined simulation data structs (each worker has its own)\n    physics::G4VUserPhysicsList # Physics List\n    generator::G4JLPrimaryGenerator # Primary particle generator\n    field::Union{G4Field, G4JLMagneticField} # Magnetic field instance\n    evtdisplay::G4JLDisplay     # Event display instance\n    nthreads::Int32             # number of worker threads\n    verbose::Int32              # verbosity level for physics lists\n    sdetectors::Dict{String,Vector{G4JLSensitiveDetector}} # dictionary of sensitive detectors\n    scorers::Vector{G4JLScoringMesh} # vector of scoring meshes","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The following are the currently defined possible user actions:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"stepping action. Called on each simulation step. The signature is (::G4Step, ::G4JLApplication)::Nothing. Consult the G4Step reference manual to see what you can get from it. \npre-tracking action. Called at the creation of a new participle being tracked. The signature is (::G4Track, ::G4JLApplication)::Nothing. Consult the G4Step reference manual to see what you can get from it.\npost-tracking action. Called at the end of the particle being tracked. The signature is (::G4Track, ::G4JLApplication)::Nothing. Consult the G4Track reference manual to see what you can get from it.\nbegin-event action. Called at the beginning of each event. The signature is (::G4Event, ::G4JLApplication)::Nothing. Consult the G4Event reference manual to see what you can get from it.\nend-event action. Called at the end of each event. The signature is (::G4Event, ::G4JLApplication)::Nothing. Consult the G4Event reference manual to see what you can get from it.\nbegin-run action. Called at the beginning of a run. The signature is (::G4Run, ::G4JLApplication)::Nothing. Consult the G4Run reference manual to see what you can get from it.\nend-run action. Called at the end of a run. The signature is (::G4Run, ::G4JLApplication)::Nothing. Consult the G4Run reference manual to see what you can get from it.","category":"page"},{"location":"#Sensitive-Detectors","page":"Introduction","title":"Sensitive Detectors","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The user can define sensitive detectors by defining a data structure and 3 callback functions, which will initialize, fill and dispose the defined data structure. Later, the instantiated sensitive detector would be associated to one or more logical volumes of the detector setup. Instantiating a G4JLSensitiveDetector will require the following arguments:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"name. A string to identify the sensitive detector. No default.\nsd data. A instance of a user defined G4JLSDData mutable data structure that will passed to each callback invocation.\ninitialize method. User method that is called at the beginning of each event. The signature is (::B2aSDData, ::G4HCofThisEvent)::Nothing.\nendOfEvent method. User method that is called at the end of each event. The signature is (::B2aSDData, ::G4HCofThisEvent)::Nothing.\nprocessHits method. User method that is called at simulation step that ends at the associated logical volume. The signature is (::B2aSDData, ::G4Step, ::G4TouchableHistory)::Bool. Consult the G4Step reference manual to see what you can get from the G4Step. It returns true if a true hit is generated.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The following is a example on how to define a sensitive detector","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"#--------------------------------------------------------------------------------------------------\n#---Define Crystal Sensitive Detector--------------------------------------------------------------\n#--------------------------------------------------------------------------------------------------\n#---SD collected data------------------------------------------------------------------------------\nstruct CrystalSDData <: G4JLSDData\n    hitcollection::Vector{Hit}   # define a hit collection\n    CrystalSDData() = new(Hit[])\nend\n#---Initialize method------------------------------------------------------------------------------\nfunction crystal_initialize(::G4HCofThisEvent, data::CrystalSDData)::Nothing\n    empty!(data.hitcollection)   # empty the hit collection at every event\n    return\nend\n#---Process Hit method-----------------------------------------------------------------------------\nfunction crystal_processHits(step::G4Step, ::G4TouchableHistory, data::CrystalSDData)::Bool\n    part = step |> GetTrack |> GetParticleDefinition\n    part == G4OpticalPhoton && return false \n    edep = step |> GetTotalEnergyDeposit\n    edep <  0. && return false\n    pos = step |> GetPostStepPoint |> GetPosition\n    push!(data.hitcollection, Hit(0., pos, edep, ScintCryst))  # fill the collection with a new Hit\n    return true\nend\n#---Create SD instance-----------------------------------------------------------------------------\nG4JLSensitiveDetector(\"Crystal_SD\", CrystalSDData();           # name an associated data are mandatory\n                       processhits_method=crystal_processHits, # process hist method (also mandatory)\n                       initialize_method=crystal_initialize)   # intialize method","category":"page"},{"location":"#Scoring-meshes","page":"Introduction","title":"Scoring meshes","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The user can also specify scoring meshes to obtain quantities on the defined grid. In Geant4 this is achieved using a set of UI commands. In this Julia interface this functionality has been encapsulated in a number of data structures. The function to create a scoring mesh is G4JLScoringMesh and receive as arguments the the type and dimensions of the mesh, the position, the rotation, the number of bins in each dimension, and the quantities to accumulate with eventually some filter conditions. See for example the scoring mesh from RE03:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"sc1 = G4JLScoringMesh(\"boxMesh_1\",\n                      BoxMesh(1m,1m,1m),\n                      bins = (30, 30, 30),\n                      quantities = [ energyDeposit(\"eDep\")\n                                     nOfStep(\"nOfStepGamma\", filters=[ParticleFilter(\"gammafilter\", \"gamma\")])\n                                     nOfStep(\"nOfStepEMinus\", filters=[ParticleFilter(\"eMinusFilter\", \"e-\")])\n                                     nOfStep(\"nOfStepEPlus\", filters=[ParticleFilter(\"ePlusFilter\", \"e+\")])\n                                   ]\n                      )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The scoring mesh is added into the 'scorersargument when constructing a [G4JLApplication`](@ref). After a run hs been executed, the user can obtain the quantity values (sum, sum2,entries) on the 3D grid just calling by accessing the quantity as an attribute of the scoring mesh. The returned 3D Julia array is shaped to the declared bins. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> beamOn(app,10000)\njulia> sum, sum2, entries = sc1.eDep\njulia> typeof(sum)\nArray{Float64, 3}\n\njulia> typeof(entries)\nArray{Int64, 3}\n\njulia> size(sum)\n(30, 30, 30)","category":"page"},{"location":"#Detector-and-Event-Display","page":"Introduction","title":"Detector and Event Display","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"For visualization applications, the user can create an instance of G4JLEventDisplay([settings file]) and give it to the constructor of G4JLApplication in the evtdisplay attribute. The constructor accepts a visualization settings file that will overwrite the default settings in the file Geant4.jl/ext/G4Vis/settings.jl. The format of the settings is Julia NamedTuple. Here is an example:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(\n    display = (\n        show_axis = false,\n    ),\n    trajectories = (\n        color = :yellow,\n    ),\n)","category":"page"},{"location":"#Examples","page":"Introduction","title":"Examples","text":"","category":"section"},{"location":"#basic/B1","page":"Introduction","title":"basic/B1","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is most basic example. For this example we have kept the interface closer to the native C++ interface. The only difference with respect the C++, is that that we need to instantiate a G4JLDetectorConstruction with the Julia function that will be callback to construct the detector geometry as argument. This is because we cannot inherit from Julia the C++ class G4VUserDetectorConstruction, which is the way foreseen in the native Geant4 toolkit to provide the specific user detector geometry. Similarly, for the user actions and primary particle generator we need to instantiate a G4JLActionInitialization. The interaction with the application is done with the G4UImanager. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To run it execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=examples examples/basic/B1/B1.j","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"or execute the notebook examples/basic/B1/B1.ipynb","category":"page"},{"location":"#basic/B2a","page":"Introduction","title":"basic/B2a","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example fills a vector of TrackerHit that is stored in the B2aSDData simulation data structure for each event. This is achieved with a sensitive detector associated to the Chamber logical volume. The example is using the high-level Julia interface with the instantiation of a G4JLApplication declaring all the elements of the application (geometry, physics, simulation data, user actions, etc.)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To run it execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=examples examples/basic/B2/B2a.jl","category":"page"},{"location":"#extended/RE03","page":"Introduction","title":"extended/RE03","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example makes use of the built-in scoring capability of Geant4 with a new Julia API interface creating an instance of G4JLScoringMesh, instead of using the native Geant4 UI. The user defines a scoring mesh, and quantities to be collect and gets the results after the run. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To run it execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=examples examples/extended/RE03/RE03.jl","category":"page"},{"location":"#WaterPhantom","page":"Introduction","title":"WaterPhantom","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example is similar to RE03 but it defines a custom primary particle generator (MedicalBeam) instead of using the predefined particle gun generator (G4JLGunGenerator). It is a notebook and produces plots after each run.    To run it execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"jupyter notebook examples/WaterPhantom/WaterPhantom.ipynb","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"See the rendered notebook.","category":"page"},{"location":"#TestEm3","page":"Introduction","title":"TestEm3","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example comes from extended/electromagnetic/TestEm3 example. Since it requires additional packages such as FHist for histograms and Plots for their visualization, it has its own Julia environment in the folder examples/TestEm3. It uses the Julia high-level interface with the instantiation of a G4JLApplication declaring all the elements of the application.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To run it, execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=examples -i examples/TestEm3/TestEm3.jl","category":"page"},{"location":"#Scintillator","page":"Introduction","title":"Scintillator","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Example with optical photons and customized physics list, as well as with a couple of sensitive detectors (for the crystal and silicon) and some simple analysis of the results. To run it, execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=examples -i examples/Scintillator/Scintillator.jl","category":"page"},{"location":"#Visualization-examples","page":"Introduction","title":"Visualization examples","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The Geant4.jl project includes additional functionality for visualization under the extension directory ext/G4Vis/examples. This is done in a different directory to separate and minimise the dependencies. The julia ext/G4Vis/examples/Project.toml file  has the complete list of dependencies needed for running these examples. In order to load all the required dependencies the user can execute the first time:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"`julia --project=Geant4.jl/ext/G4Vis/examples -e 'import Pkg; Pkg.instantiate()'`","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nNote that depending on the actual platform and the desired interactivity, the user may need to choose a different Makie.jl backend among the existing ones (GLMakie, CairoMakie, WGLMakie,...).","category":"page"},{"location":"#B1vis.jl","page":"Introduction","title":"B1vis.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example uses the GLMakie backend (OpenGL) of Makie. The use may change to other backends depending on his/her setup. To visualize the B1 detector do:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=ext/G4Vis/examples -i  ext/G4Vis/examples/B1vis.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nNote the option -i to keep the interactive session open","category":"page"},{"location":"#B2aVis.jl","page":"Introduction","title":"B2aVis.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example to visualize the detector and (a very simplistic) visualization of one event.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=ext/G4Vis/examples -i  ext/G4Vis/examples/B2avis.jl","category":"page"},{"location":"#Solids.ipynb","page":"Introduction","title":"Solids.ipynb","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This notebook shows all the possible solids in Geant4. This is work in progress and some solids do not have graphical representation yet.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"jupyter notebook ext/G4Vis/examples/Solids.ipynb","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"See the rendered notebook","category":"page"},{"location":"#HBC30","page":"Introduction","title":"HBC30","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example mimics the CERN 30cm liquid hydrogen bubble chamber. It demonstrates the use of a uniform magnetic field (G4JLUniformMagField). It is useful for displaying the detector and the produced particles in a customizable manner.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To run it, execute","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=ext/G4Vis/examples -i ext/G4Vis/examples/HBC30/HBC30.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"It also exists in a notebook format. ","category":"page"},{"location":"#Building-the-wrapper-code","page":"Introduction","title":"Building the wrapper code","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We use the Geant4 native binary libraries and data from the binary package Geant4_jll, which has been produced with the BinaryBuilder recipe. The wrapper library is downloaded from the binary package Geant4_julia_jll.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We have the possibility during the development of this package to re-generate locally new C++ wrapper code. For this we need to have wrapit installed, which itself requires libclang to be installed. If the executable is not found (not in the PATH), we can use the wrapper code that is already pre-generated and distributed with this package.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"what C++ classes get wrapped is controlled by the file gen/Geant4.wit.in. See the documentation of WrapIt for the details. \nrun the gen/build.jl script generate the wrapper code (if wrapit found) and build the wrapper library.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nPlease note that compiling the single generated wrapper file takes very long. This is due to the current implementation of WrapIt that places all wrapped types in a single file. This may change in the future.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Once the wrapper code is stabilized we move the generated code to the repository Geant4_cxxwrap to regenerate the binary package Geant4_julia_jll using the BinaryBuilder.","category":"page"},{"location":"#Release-Notes","page":"Introduction","title":"Release Notes","text":"","category":"section"},{"location":"#0.1.11","page":"Introduction","title":"0.1.11","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Migrated to Julia 1.10\nUsing the latest version of WrapIt to generate the CxxWrap wrappers\nNew features\nAdded G4JLGeneralParticleSource, which makes use of the Geant4 G4GeneralParticleSource class for generation of primary particles for simulations. See documentation.\nAdded a new extension module G4Hist that defines convenient histogram types (H1D and H2D) on top of FHist.jl. See documentation. ","category":"page"},{"location":"#0.1.10","page":"Introduction","title":"0.1.10","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"New features\nProvide an EventDisplay as a building block of the application. New evtdisplay argument in the constructor. \nAdded new wrapped classes to support event displays: G4EventManager, G4TrajectoryContainer, G4VTrajectory, G4VTrajectoryPoint, G4StateManager, G4VStateDependent G4ApplicationState","category":"page"},{"location":"#0.1.9","page":"Introduction","title":"0.1.9","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Changes needed for running ATLTileCalTB example ","category":"page"},{"location":"#0.1.8","page":"Introduction","title":"0.1.8","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"New features:\nAdded all example scripts as tests, so that the CI will systematically execute them.\nAdded new wrapped classes: G4LogicalVolumeStore, G4MaterialPropertiesTable, G4OpticalParameters, G4OpticalSurface, G4LogicalBorderSurface, G4LogicalSkinSurface, G4VProcess, G4ProcessType, G4Random, G4EmStandardPhysics_option4, G4OpticalPhysics, G4OpBoundaryProcess, G4ProcessManager, G4ProcessVector\nAdded Geant4.PhysicalConstants sub-module\nAdded testRandom to the test suite\nAdded Scintillation example with scintillating crystals and optical photons\nFixes:\nFixed broken [visualization] examples\nImprove HBC30 example to visualize trajectories in a more smooth manner. Moved it under ext/G4Vis/examples","category":"page"},{"location":"#0.1.7","page":"Introduction","title":"0.1.7","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"New features:\nSupport for ARM64 (MacOS M1). Implemented workaround for closures in @safe_cfunction, which were for supported in this  platform. \nAdded support for magnetic field. Additional keyword argument in the G4JLApplication. Added example HBC30 for a simulation of a liquid hydrogen bubble chamber.\nAdded drawing capabilities for G4Polyhedra, G4EllipticalTube, G4Ellipsoid\nFixes:\nFix example WaterPhantom to added to new callback closures","category":"page"},{"location":"#0.1.6","page":"Introduction","title":"0.1.6","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"New features:\nRestructured G4Vis as an extension of Geant4.jl. It is automatically loaded when all the required weak dependencies are satisfied (e.g. \"Makie\", \"Colors\", \"StaticArrays\", \"Rotations\", \"LinearAlgebra\")\nAdded missing basic solids including the BooleanSolid\nUsing the IGLWrap_jll binary wrapper to libigl C++ library to draw boolean solids.\nAdded notebook ext/G4Vis/Solids.ipynb to exercise and draw all possible solids (some are still missing)","category":"page"},{"location":"#0.1.5","page":"Introduction","title":"0.1.5","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"New features:\nSupport for Multi-threading. New parameter in G4JLApplication to set the number of threads. Default is serial, nthreads = 0\nAdded verbosity level with the argument verbose in G4JLApplication\nFixes:\nFix continuous pre-compilation after moving to Julia 1.9\nFix for embedded figures in notebooks","category":"page"},{"location":"#0.1.4","page":"Introduction","title":"0.1.4","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Added support for scoring with G4JLScoringMesh function\nAdded generation of documentation including running the jupyter notebooks","category":"page"}]
}
